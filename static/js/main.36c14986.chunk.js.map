{"version":3,"sources":["components/Account.js","containers/Accounts.js","components/PrintAccount.js","containers/Printout.js","App.js","serviceWorker.js","index.js"],"names":["Account","platform","linkChange","className","src","type","name","placeholder","onChange","platforms","Accounts","onLinkChange","onSubmit","target","map","i","key","value","PrintAccount","accountLink","Printout","accounts","App","setState","console","log","state","handleSubmit","event","preventDefault","printing","goBack","facebook","google","instagram","twitter","yelp","this","window","print","onClick","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAYeA,G,MATC,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,WAC1B,OACE,yBAAKC,UAAU,mCACb,yBAAKC,IAAG,iBAAYH,EAAZ,UACR,2BAAOE,UAAU,4EAA4EE,KAAK,OAAOC,KAAML,EAAUM,YAAW,gBAAWN,EAAX,QAA2BO,SAAUN,OCHzKO,G,MAAY,CAAC,WAAY,SAAU,YAAa,UAAW,SA6BlDC,EA3BE,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC9B,OACE,6BACE,wBAAIT,UAAU,aAAd,iCACA,yBAAKA,UAAU,qBACb,0BAAMU,OAAO,SAASD,SAAUA,GAE5BH,EAAUK,KAAI,SAACb,EAAUc,GACvB,OACE,kBAAC,EAAD,CAASC,IAAKD,EAAGd,SAAUA,EAAUC,WAAYS,OAIvD,yBAAKR,UAAU,aACb,gDACA,4BACE,6DACA,8DAGJ,2BAAOE,KAAK,SAASY,MAAM,gBAAgBd,UAAU,sECPlDe,G,MAhBM,SAAC,GAA+B,IAA7BjB,EAA4B,EAA5BA,SAAUkB,EAAkB,EAAlBA,YAChC,MAAmB,KAAhBA,EACM,KAGP,yBAAKhB,UAAU,iBACb,6BACE,yBAAKC,IAAG,iBAAYH,EAAZ,WAEV,6BACE,2BAAIkB,OCTNV,G,MAAY,CAAC,WAAY,SAAU,YAAa,UAAW,SAmClDW,EAjCE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,OACE,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,iBAEf,yBAAKA,UAAU,mBAAf,UAGA,yBAAKA,UAAU,6BACb,yBAAKC,IAAI,4BACT,8FAEF,yBAAKD,UAAU,wBACb,uBAAGA,UAAU,MAAb,yBACA,yBAAKA,UAAU,yBAEbM,EAAUK,KAAI,SAACb,EAAUc,GACvB,OACE,kBAAC,EAAD,CAAcC,IAAKD,EAAGd,SAAUA,EAAUkB,YAAaE,EAASpB,UAMxE,yBAAKE,UAAU,cAAf,UAGA,yBAAKA,UAAU,oBC4BNmB,G,kBAvDb,aAAc,IAAD,8BACX,+CAiBFX,aAAe,YAAkC,IAAD,IAA9BE,OAAUP,EAAoB,EAApBA,KAAMW,EAAc,EAAdA,MAChC,EAAKM,SAAL,eAAiBjB,EAAOW,IACxBO,QAAQC,IAAI,QAAS,EAAKC,QApBf,EAuBbC,aAAe,SAACC,GACdA,EAAMC,iBACN,EAAKN,SAAS,CAAEO,UAAU,KAzBf,EA4BbC,OAAS,WACP,EAAKR,SAAS,CAACO,UAAS,KA3BxB,EAAKJ,MAAQ,CACXM,SAAU,GACVC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,KAAM,GACNN,UAAU,GARD,E,mFAagB,IAAxBO,KAAKX,MAAMI,UACZQ,OAAOC,U,+BAmBT,OAAGF,KAAKX,MAAMI,SAEV,yBAAK3B,UAAU,aACb,yBAAKA,UAAU,4EAA4EqC,QAASH,KAAKN,QAAzG,QAGA,kBAAC,EAAD,CAAUV,SAAUgB,KAAKX,SAK7B,yBAAKvB,UAAU,OACb,wBAAIA,UAAU,eAAd,mBACA,wBAAIA,UAAU,aAAd,kCACA,yBAAKA,UAAU,kEACb,kBAAC,EAAD,CAAUQ,aAAc0B,KAAK1B,aAAcC,SAAUyB,KAAKV,qB,GAjDlDc,IAAMC,YCOJC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36c14986.chunk.js","sourcesContent":["import React from 'react';\nimport './Account.scss';\n\nconst Account = ({platform, linkChange}) => {\n  return(\n    <div className=\"Account bt bb b--light-gray pa2\">\n      <img src={`images/${platform}.png`} />\n      <input className=\"pa2 input-reset ba b--light-gray bg-transparent hover-bg-light-gray w-100\" type=\"text\" name={platform} placeholder={`Enter ${platform} url`} onChange={linkChange}/>\n    </div>\n  )\n}\n\nexport default Account;","import React from 'react'\nimport Account from '../components/Account.js'\nimport './Accounts.scss'\n\nconst platforms = [\"facebook\", \"google\", \"instagram\", \"twitter\", \"yelp\"]\n\nconst Accounts = ({ onLinkChange, onSubmit }) => {\n    return(\n      <div>\n        <h2 className=\"dark-gray\" >Fill in your social accounts:</h2>\n        <div className=\"AccountsContainer\" >\n          <form target=\"_blank\" onSubmit={onSubmit} >\n            {\n              platforms.map((platform, i) => {\n                return(\n                  <Account key={i} platform={platform} linkChange={onLinkChange} />\n                );\n              })\n            }\n            <div className=\"reminders\">\n              <h4>When you print: </h4>\n              <ul>\n                <li>Set size to A4(297mm x 210mm)</li>\n                <li>Turn off headers and footers</li>\n              </ul>\n            </div>\n            <input type=\"submit\" value=\"Print it out!\" className=\"btn-action mt3 b ph3 pv3 input-reset navy grow pointer f4 dib\" />\n          </form>\n        </div>\n      </div>\n    )\n}\n\nexport default Accounts;","import React from 'react'\nimport './PrintAccount.scss'\n\nconst PrintAccount = ({ platform, accountLink }) => {\n  if(accountLink === \"\"){\n    return null\n  }\n  return(\n    <div className=\"linkContainer\">\n      <div>\n        <img src={`images/${platform}.png`} />\n      </div>\n      <div>\n        <p>{accountLink}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default PrintAccount","import React from 'react';\nimport PrintAccount from '../components/PrintAccount'\nimport './Printout.scss'\n\nconst platforms = [\"facebook\", \"google\", \"instagram\", \"twitter\", \"yelp\"]\n\nconst Printout = ({ accounts }) => {\n  return(\n    <div className=\"Printout\" >\n      <div className=\"left section\">\n      </div>\n      <div className=\"f3 section flip\">\n        bottom\n      </div>\n      <div className=\"Instructions section flip\">\n        <img src=\"images/instructions.png\" />\n        <p>Print your own at: https://miles-au.github.io/show_my_socials/</p>\n      </div>\n      <div className=\"Accounts section pa4\">\n        <p className=\"f3\" >Follow and Review Us!</p>\n        <div className=\"accountLinksContainer\" >\n        {\n          platforms.map((platform, i) => {\n            return(\n              <PrintAccount key={i} platform={platform} accountLink={accounts[platform]} />\n            );\n          })\n        }\n        </div>\n      </div>\n      <div className=\"f3 section\">\n        bottom\n      </div>\n      <div className=\"right section\">\n      </div>\n    </div>\n  )\n}\n\nexport default Printout;","import React from 'react'\nimport Accounts from './containers/Accounts.js'\nimport Printout from './containers/Printout.js'\nimport './App.scss'\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      facebook: '',\n      google: '',\n      instagram: '',\n      twitter: '',\n      yelp: '',\n      printing: false,\n    }\n  }\n\n  componentDidUpdate(){\n    if(this.state.printing === true){\n      window.print();\n    }\n  }\n\n  onLinkChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value} );\n    console.log(\"state\", this.state);\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.setState({ printing: true});\n  }\n\n  goBack = () => {\n    this.setState({printing:false});\n  }\n\n  render() {\n    if(this.state.printing){\n      return(\n        <div className=\"whiteBack\">\n          <div className=\"ma2 noprint btn-action mt3 b ph5 pv3 input-reset navy grow pointer f3 dib\" onClick={this.goBack} >\n            back\n          </div>\n          <Printout accounts={this.state}/>\n        </div>\n      )\n    }\n    return(\n      <div className=\"App\">\n        <h1 className=\"f1 headline\">Show My Socials</h1>\n        <h2 className=\"dark-gray\">Tabletop social media printout</h2>\n        <div className=\"ma3 bg-white ba b--light-gray br4 mw5 mw7-ns center pa3 ph5-ns\">\n          <Accounts onLinkChange={this.onLinkChange} onSubmit={this.handleSubmit} />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}